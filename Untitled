def login_required(f):
    @wraps(f)
    def wrap(*args,**kwargs):
        if 'logged_in' in session:
            return f(*args, **kwargs)
        else:
            flash('Please log in first!!!')
            return redirect(url_for('login'))
    return wrap


@app.route('/logout')
@login_required
def logout():
    session.pop('logged_in', None)
    flash('you\'re now logged out')
    return redirect(url_for('get_tasks'))
    
    # Route for handling the login page logic
@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        if request.form['username'] != 'admin' or request.form['password'] != 'admin':
            error = 'Invalid Credentials. Please try again.'
        else:
            session['logged_in'] = True
            flash('you\'re logging has been successful')
            return redirect(url_for('add_recipe'))
    return render_template('login.html', error=error)
    
    
    {% block sort %}
<div class="input-field">
    <select id="sort-select">
        <option value="disabled" disabled selected>Sort recipes</option>
        <option value="desc">Cooking-time desc</option>
        <option value="asc">Cooking-time asc</option>
    s</select>
</div>
<% endblock %>



# Search results route
@app.route('/search_results', methods=["GET", "POST"])
def search_results():
    value = request.form.get('search_text')
    if request.method == 'POST':
        if len(value.split()) > 0:
            mongo.db.procedures.create_index([("$**", 'text')])
            search_results = mongo.db.procedures.find(
                {'$text': {'$search': value}})
            # for item in search_results:
            #     print("Search results: ", item)
            return render_template("tasks1.html", procedures=search_results) 
        else:
            flash("Type something")
            return redirect("tasks1.html")


    else: 
        flash("You are not allowed to perform this action")
        return redirect('/')
        
        
        
        
      ###searchhhhhhhhhhhhhhhhhhhh
      
     
<div class="row"  "center-align margin-top-3vh" "card-content">
    <div class="row hide-on-med-and-up">
        <nav class="mobile-search-bar">
            <div class="card-content">
                <form id="search-form-mobile" action="{{ url_for('search_results') }}"  value:"search" method="POST" class="col s12">
                    <div class="input-field">
                        <input class="mobile-search-bar" type="search" name="search" id="search" placeholder="Search" required>
                        <i class="material-icons" id="sendFormMobile" for="submit-form">search</i>
                    </div>
                </form>
            </div>
        </nav>
    </div>
    
    
    
    
    login#######################
    
    
    
    def index():
    if 'username' in session:
        return 'Zou are logged in as ' + session ['username']
    return render_template('logyin.html')
    
@app.route('/logyn')
def logyn():
    return ''
    
@app.route('/registration', methods=['POST', 'GET'])
def registration():
    if request.method == 'POST':
        users = mongo.db.users
        user_alive = users.find_one({'name' : request.form['username']})
        
        if user_alive is None:
            hashpass = bcrypt.hashpw(request.form['pass'], bcrypt.genSalt())
            users.insert({'name': request.form['username'], 'password': hashpass})
            session['username'] = request.form['username']
            return redirect(url_for('index'))
            
        return 'User name already exists!'
        
    return render_template('registration.html')
    
    
    
    ######pagination####
    
    
    @app.route('/')

@app.route('/get_tasks', methods=['GET'])
def get_tasks():
    
    procedure = mongo.db.procedures
    
    limit = 10
    
    procedures = procedure.find().sort('_id', pymongo.ASCENDING).limit(limit)
    
    output = []
    
    for i in procedures:
        output.append({'procedure' : i['procedure']})
        
    return jsonify ({'result' : output, 'prev_url' : '', 'next_url' : ''})
    
    
    procedure = mongo.db.procedures
    
    limit = 10
    
   
    
    output = []
    
    for i in procedures:
        output.append({'procedure' : i['procedure']})
        
    return jsonify ({'result' : output, 'prev_url' : '', 'next_url' : ''}) 
    
    
    
    return render_template("tasks.html", procedure=mongo.db.procedures.find().sort('_id', pymongo.ASCENDING))
    
    
    
    {{url_for('upvote_recipe', recipe_id=recipe._id)}}   {{recipe.votes}}
    
    {{url_for('upvote_recipe', procedures_id=procedure._id)}}
    
    {{procedures.votes}}
    
    
    
    
                                <div class="input-field col s12 m4">
        <label for="upvote" >Cooking Time:</label>
        <input type="number" id="upvote" name="upvote" required>
    </div>
    
        <div class="row col s5">
                                <button class="btn waves-effect waves-light red" type="cancel" name="action">Cancel edition
                     <i class="material-icons right">cancel</i>
                    </button>
                    
                    
                    
        {{url_for('upvote_recipe', recipe_id=recipe._id)}} 
        
        
        
        <a href="{{url_for('upvote_recipe', procedures_id=procedures._id)}}" id="upvote" class="hvr-grow waves-effect waves-light btn btn_big darken-1 tooltipped"
                            data-position="bottom" data-tooltip="Upvote"><i class="fa fa-thumbs-up" aria-hidden="true"></i>{{procedures.votes}}
                            </a>
                            
                            
                            
          def test_get_cuisine(self):
        tester = app.test_client(self)
        response = tester.get('/get_cuisine', content_type='html/text')
        self.assertEqual(response.status_code, 200)
        
    def test_edit_cuisine(self):
        tester = app.test_client(self)
        response = tester.get('edit_cuisine', content_type='html/text')
        self.assertEqual(response.status_code, 200) 
        
    def test_update_cuisine(self):
        tester = app.test_client(self)
        response = tester.get('/update_cuisine', content_type='html/text')
        self.assertEqual(response.status_code, 200) 
        
    def test_delete_cuisine(self):
        tester = app.test_client(self)
        response = tester.get('/delete_cuisine', content_type='html/text')
        self.assertEqual(response.status_code, 200)
    
        
    def test_new_cuisine(self):
        tester = app.test_client(self)
        response = tester.get('/new_cuisine', content_type='html/text')
        self.assertEqual(response.status_code, 200)
        
    def test_upvote_recipe(self):
        tester = app.test_client(self)
        response = tester.get('/upvote_recipe', content_type='html/text')
        self.assertEqual(response.status_code, 200)
        
        
    def test_downvote_recipe(self):
        tester = app.test_client(self)
        response = tester.get('/downvote_recipe', content_type='html/text')
        self.assertEqual(response.status_code, 200 
        
        
        
      <script type="text/javascript">
    var $ENDPOINT = { { request.script_root | tojson | safe } };
  </script>    